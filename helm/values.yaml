global:
  nameOverride: ""
  fullnameOverride: ""
  licenseplate: "abcdef"
  cluster: "silver"
  serviceAccount:
    name: "abcdef-vault"
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
  # -- List of servers proxied by the SSO Gateway
  servers:
    - domain: "app1.example.com" 
      backend: "app1-backend.example.com"
    - domain: "app2.example.com"
      backend: "app2-backend.example.com"

  # Inject Keycloak JSON multi-value config from a Vault secret
  # See details: https://digital.gov.bc.ca/technology/cloud/private/products-tools/vault/
  vault:
    # Vault role for this service
    role: "abcdef-nonprod" 
    # Secrets path in container
    containerPath: "/vault/secrets/secrets"
    # Vault engine to use
    engine: "nonprod"

# -- Node.js SSO Gateway default configuration
ssoClient:

  enabled: true

  replicaCount: 1

  image:
    repository: "ghcr.io/bcgov/sso-gateway-client"
    tag: "latest"
    pullPolicy: IfNotPresent

  vault:
    # Name of the Vault secret to inject into the container.
    secret: "keycloak-config"

  # -- Image Pull Secrets for Private GHCR
  imagePullSecrets: []
 
  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext:
    runAsNonRoot: true
    # runAsUser: 1001 # DO NOT SET THIS if you want OpenShift to assign a random non-root UID
    allowPrivilegeEscalation: false # Recommended for security
    capabilities:
      drop:
        - ALL

  env: {}

  service:
    type: ClusterIP
    port: 3000

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Liveness and Readiness Probes
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

# -- Redis Datastore configuration
redis:

  enabled: true

  replicaCount: 1

  image:
    repository: redis
    pullPolicy: IfNotPresent
    tag: "8.0.2"

  vault:
    # Name of the Vault secret to inject into the container.
    secret: "redis-password"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 6379

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Redis connection configuration
  env: {}

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

  persistence:
    size: 100Mi
    storageClassName: ""

  volumes: []

  volumeMounts: []

  nodeSelector: {}

  tolerations: []

  affinity: {}

# -- NGINX Reverse Proxy configuration
nginx:

  enabled: true
  replicaCount: 1

  image:
    repository: "ghcr.io/bcgov/sso-gateway-proxy"
    tag: latest
    pullPolicy: Always

  # Use serverBlocks to provide entire Nginx server block definitions
  # This will completely override the default generated server blocks.
  # Ensure proper Nginx syntax and indentation within this string.
  serverBlocks: |
    server {
        listen 443;
        listen [::]:443;
        server_name my.custom.domain.com; # Example custom domain

        # Example SSL/TLS configuration
        ssl_certificate /etc/nginx/certs/my.custom.domain.com.crt;
        ssl_certificate_key /etc/nginx/certs/my.custom.domain.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256';
        ssl_prefer_server_ciphers on;

        error_page 401 403 = @login_required;
        port_in_redirect off;

        proxy_connect_timeout       75s;
        proxy_send_timeout          75s;
        proxy_read_timeout          300s;

        location / {
          auth_request /auth/;
          auth_request_set $auth_status $upstream_status;
        }

        location /auth/ {
          internal;
        }

        location /sso-login {
        }

        location /sso {
        }

        location @login_required {
          return 302 /sso-login?relay=$request_uri;
        }
    }

  service:
    type: ClusterIP 
    ports:
      http: 8080
      https: 8081

  ingress:
    enabled: false # Set to true to use Kubernetes Ingress resource (requires Ingress Controller)
    className: "nginx" # Or your specific Ingress Controller class name
    host: "sso.example.com" # REPLACE ME!
    path: /
    pathType: Prefix
    annotations: {} # Add any specific Ingress annotations here (e.g., cert-manager, rewrite rules)
    tls:
      enabled: false
      secretName: "" # e.g., sso-example-com-tls

  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Liveness and Readiness Probes
  probes:
    liveness:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

  volumeMounts: []

  volumes: []
